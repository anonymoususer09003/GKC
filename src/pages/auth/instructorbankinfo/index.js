import React, { useState,useEffect } from "react";
import Head from "next/head";
import { TutorNavbar, Footer } from "../../../components";
import {useRouter} from "next/router"
import { RiArrowGoBackLine } from "react-icons/ri";
import Link from "next/link";
import axios from 'axios'
export default function ParentRegistrationCCInfo() {
    const navigation = useRouter();
    const [userType, setUserType] = useState(null);
    const [userInfo, setUserInfo] = useState(null);

    const [bankAccountType, setBankAccountType] = useState('checking')
    const [bankName, setBankName] = useState('')
    const [bankAccountNumber, setBankAccountNumber] = useState('')
    const [confirmBankAccountNumber, setConfirmBankAccountNumber] = useState('')
    const [bankRoutingNumber, setBankRoutingNumber] = useState('')
    const [confirmBankRoutingNumber, setConfirmBankRoutingNumber] = useState('')
    let isValid = bankName !== "" && bankAccountNumber !== "" &&  confirmBankAccountNumber !== "" && bankAccountNumber ==   confirmBankAccountNumber && bankRoutingNumber !== "" &&  confirmBankRoutingNumber !== "" && bankRoutingNumber ==   confirmBankRoutingNumber
    const onContinue = async () => {
        try {
           const response = await axios.post(
              `http://34.227.65.157/auth/register-instructor`,
              {
                firstName: userInfo.firstName,
                lastName: userInfo.lastName,
                email: userInfo.email,
                password: userInfo.password,
                address1: userInfo.address1,
                address2: userInfo.address2,
                country: userInfo.country,
                state: userInfo.state,
                city: userInfo.city,
                zipCode: userInfo.zipCode,
                timeZoneId: userInfo.timeZoneId,
                instructorBio: userInfo.instructorBio,
                hourlyRate: userInfo.hourlyRate,
                deliveryModes: userInfo.deliveryModes,
                acceptInterviewRequest: userInfo.acceptInterviewRequest,
                gradesIdToTutor: userInfo.gradesIdToTutor,
                languagesIdPreference: userInfo.languagesIdPreference,
                courseToTeachAndProficiency: userInfo.courseToTeachAndProficiency,
                bankAccountType: bankAccountType,
                bankName: bankName,
                bankAccountNumber:bankAccountNumber,
                bankRoutingNumber: bankRoutingNumber,
              }
              
            );
            
            const res = await axios.get(
              "http://34.227.65.157/user/logged-user-role",
              {
                headers: {
                  Authorization: `Bearer ${response.data.accessToken}`,
                },
              }
            );
            console.log(res.data);
            window.localStorage.setItem(
              "gkcAuth",
              JSON.stringify({
                accessToken: response.data.accessToken,
                role: res.data,
              })
            );
            window.localStorage.removeItem("registrationForm")
            window.localStorage.removeItem("userType")
            navigation.push("/instructor");

    
          } catch (error) {
            console.error(error);
          }
      };


      useEffect(() => {
        var stored = JSON.parse(window.localStorage.getItem("registrationForm"));
        var typ = JSON.parse(window.localStorage.getItem("userType"));
        setUserInfo(stored);
        setUserType(typ);
      }, []);
  return (
    <>
      <Head>
        <title>Auth | Instructor CC Info</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container-fluid">
      <Link
          href="/"
          className="text-decoration-none p-4 d-flex gap-2 align-items-center text-dark"
        >
          <RiArrowGoBackLine />
          <p className="fw-bold m-0 p-0 ">Back to home</p>
        </Link>
        <div className="row">
          <div
            className="col-12 col-lg-5 position-relative"
            style={{
              backgroundImage: 'url("/assets/register_group.png")',
              height: "100vh",
              backgroundRepeat: "no-repeat",
              backgroundSize: "100% 100%",
            }}
          ></div>
          <div className="col-12 col-lg-7 d-flex justify-content-center align-items-center ">
            <div className="w-75 p-5">
              <div>
                        <h4 className="text-dark fw-bold pb-2">
                 Tell us where to deposit your payments.
                </h4>
                <select className="w-100 p-2 rounded outline-0 border border_gray  " value={bankAccountType} onChange={(e)=>setBankAccountType(e.target.value)}>
                    <option value='checking'>Checking</option>
                    <option value='saving'>Saving</option>
                  </select>
                <input
                  type="text"
                  className="w-100 p-2 rounded outline-0 border border_gray   mt-3"
                  placeholder="Bank Name"
                  value={bankName} onChange={(e)=>setBankName(e.target.value)}
                />
             
   <div className="d-flex gap-2 my-3">
   <input
                  type="text"
                  className="w-100 p-2 rounded outline-0 border border_gray  "
                  placeholder="Account Number"
                  value={bankAccountNumber} onChange={(e)=>setBankAccountNumber(e.target.value)}

                
                  />
                  <input
                    type="text"
                    className="w-100 p-2 rounded outline-0 border border_gray  "
                    placeholder="Confirm Account Number"
                  value={confirmBankAccountNumber} onChange={(e)=> setConfirmBankAccountNumber(e.target.value)}

                  />
                </div>
                <div className="d-flex gap-2 my-2">
                  <input
                    type="text"
                    className="w-100 p-2 rounded outline-0 border border_gray   mb-3"
                    placeholder="Routing Number"
                  value={bankRoutingNumber} onChange={(e)=>setBankRoutingNumber(e.target.value)}

                  />
                  <input
                    type="text"
                    className="w-100 p-2 rounded outline-0 border border_gray   mb-3"
                    placeholder="Confirm Routing Number"
                  value={confirmBankRoutingNumber} onChange={(e)=>setConfirmBankRoutingNumber(e.target.value)}

                  />
                </div>
                <div className="d-flex gap-2 justify-content-center mt-3">
                  <button
                       className={`w-50 text-light p-2 rounded fw-bold  bg-gray-300 ${
                       isValid ? "btn_primary" : " btn_disabled"
                      }`}
                      disabled={!isValid}
                      onClick={onContinue}
                  >
                    Continue
                  </button>
                </div>
                <div className="d-flex gap-2 justify-content-center  mt-3">
                  <button
                    className={`w-50 text-light p-2 rounded fw-bold  bg-gray-300 
                        btn_secondary
                      `}
              
                    onClick={onContinue}
                  >
                    I will do this later
                  </button>
                </div>
           
              </div>
            </div>
          </div>
        </div>

        <Footer />
      </main>
    </>
  );
}
